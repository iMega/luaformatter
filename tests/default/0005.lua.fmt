-- for
for i, pkg in ipairs(packages) do
    for name, version in pairs(pkg) do
        if name == searched then
            print(version)
        end
    end
end

-- Load a local or remote manifest describing a repository.
-- All functions that use manifest tables assume they were obtained
-- through either this function or load_local_manifest.
-- @param repo_url string: URL or pathname for the repository.
-- @param lua_version string: Lua version in "5.x" format, defaults to installed version.
-- @return table or (nil, string, [string]): A table representing the manifest,
-- or nil followed by an error message and an optional error code.
function manif.load_manifest(repo_url, lua_version)
    -- code
end

-- TODO: implement method
local function something()
    -- FIXME: check conditions
end

for _, item in ipairs(items) do
    do_something_with_item(item)
end

-- good
local this_is_my_object = {}

local function do_that_thing()
    -- ...stuff...
end

-- good
local function is_evil(alignment)
    return alignment < 100
end

local player = {name = "Jack", class = "Rogue"}

table = {["1394-E"] = val1, ["UTF-8"] = val2, ["and"] = val3}

local name = "LuaRocks"
local sentence = 'The name of the program is "LuaRocks"'

-- bad
local nope = function(name, options)
    -- ...stuff...
end

-- good
local function yup(name, options)
    -- ...stuff...
end

-- bad
local function is_good_name(name, options, arg)
    local is_good = #name > 3
    is_good = is_good and #name < 30

    -- ...stuff...

    return is_good
end

-- good
local function is_good_name(name, options, args)
    if #name < 3 or #name > 30 then
        return false
    end

    -- ...stuff...

    return true
end

-- bad
local data = get_data("KRP" .. tostring(area_number))
-- good
local data = get_data("KRP" .. tostring(area_number))
local data = get_data("KRP") .. tostring(area_number)

local an_instance = a_module.new({a_parameter = 42, another_parameter = "yay"})

local luke = {jedi = true, age = 28}

-- bad
local is_jedi = luke["jedi"]

-- good
local is_jedi = luke.jedi

local vehicles = load_vehicles_from_disk("vehicles.dat")

if vehicles["Porsche"] then
    porsche_handler(vehicles["Porsche"])
    vehicles["Porsche"] = nil
end

for name, cars in pairs(vehicles) do
    regular_handler(cars)
end

local my_module = {}

function my_module.a_function(x)
    -- code
end

local version_mt = {
    __eq = function(a, b)
        -- code
    end,
    __lt = function(a, b)
        -- code
    end,
}

-- bad
superpower = get_superpower()

-- good
local superpower = get_superpower()

-- bad
local function good()
    local name = get_name()

    test()
    print("doing stuff..")

    -- ...other stuff...

    if name == "test" then
        return false
    end

    return name
end

-- good
local bad = function()
    test()
    print("doing stuff..")

    -- ...other stuff...

    local name = get_name()

    if name == "test" then
        return false
    end

    return name
end

-- bad
if name ~= nil then
    -- ...stuff...
end

-- good
if name then
    -- ...stuff...
end

local function default_name(name)
    -- return the default "Waldo" if name is nil
    return name or "Waldo"
end
